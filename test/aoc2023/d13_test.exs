defmodule AOC2023.D13Test do
  use ExUnit.Case
  doctest AOC2023.D13

  @test_p1 <<"""
             #.##..##.
             ..#.##.#.
             ##......#
             ##......#
             ..#.##.#.
             ..##..##.
             #.#.##.#.

             #...##..#
             #....#..#
             ..##..###
             #####.##.
             #####.##.
             ..##..###
             #....#..#
             """>>

  @test_p2 @test_p1

  test "part1 on test data" do
    assert AOC2023.D13.part1(@test_p1) == 405
  end

  test "part2 on test data" do
    assert AOC2023.D13.part2(@test_p2) == 400
  end

  test "internals" do
    {p1_normal, p1_transposed} =
      {[
         ["#", ".", "#", "#", ".", ".", "#", "#", "."],
         [".", ".", "#", ".", "#", "#", ".", "#", "."],
         ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
         ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
         [".", ".", "#", ".", "#", "#", ".", "#", "."],
         [".", ".", "#", "#", ".", ".", "#", "#", "."],
         ["#", ".", "#", ".", "#", "#", ".", "#", "."]
       ],
       [
         ["#", ".", "#", "#", ".", ".", "#"],
         [".", ".", "#", "#", ".", ".", "."],
         ["#", "#", ".", ".", "#", "#", "#"],
         ["#", ".", ".", ".", ".", "#", "."],
         [".", "#", ".", ".", "#", ".", "#"],
         [".", "#", ".", ".", "#", ".", "#"],
         ["#", ".", ".", ".", ".", "#", "."],
         ["#", "#", ".", ".", "#", "#", "#"],
         [".", ".", "#", "#", ".", ".", "."]
       ]}

    assert AOC2023.D13.read_and_flip(
             <<"""
               #.##..##.
               ..#.##.#.
               ##......#
               ##......#
               ..#.##.#.
               ..##..##.
               #.#.##.#.
               """>>
           ) == {p1_normal, p1_transposed}

    assert AOC2023.D13.scan_mirror(p1_normal) == {:error, "no mirror found"}
    assert AOC2023.D13.scan_mirror(p1_normal, 1) == {:ok, 3}
    assert AOC2023.D13.scan_mirror(p1_transposed) == {:ok, 5}
    assert AOC2023.D13.scan_mirror(p1_transposed, 1) == {:error, "no mirror found"}
  end
end
